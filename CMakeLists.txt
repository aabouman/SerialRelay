cmake_minimum_required(VERSION 3.0.0)
project(zmq_example VERSION 0.1.0 LANGUAGES C)

include(CTest)
enable_testing()

########################################
# Download dependencies
########################################

include(FetchContent)  # pull in the `FetchContent` CMake module

# Download libzmq into `build/_deps
FetchContent_Declare(libzmq
  GIT_REPOSITORY https://github.com/zeromq/libzmq
  GIT_TAG 4097855ddaaa65ed7b5e8cb86d143842a594eebd # version 4.3.4
)

# Include the libzmq CMake files in the current project (adds all of it's targets)
if(NOT libzmq_POPULATED)
  FetchContent_Populate(libzmq)
  set(ZMQ_BUILD_TESTS OFF CACHE BOOL "Test suite for libzmq")
  add_subdirectory(${libzmq_SOURCE_DIR} ${libzmq_BINARY_DIR})
endif()

# Modify the `libzmq` target generated by it's build system to include the zmq header
# files as part of its public interface
target_include_directories(libzmq
  PUBLIC
  $<BUILD_INTERFACE:${libzmq_SOURCE_DIR}/include>
)

# Find the libserialport package installed on the computer 
find_package(PkgConfig)  # includes the `PkgConfig` CMake module
pkg_check_modules(LIBSP libserialport)  # searches the computer for the libserialport package

# Creates an interface target with the info from the previous command
add_library(libserialport INTERFACE)    

# Link the libserial port libraries so that any target linking this also links against the libserialport libraries
target_link_libraries(libserialport     
  INTERFACE
  ${LIBSP_LINK_LIBRARIES}
)

# Add the libserialport header directory so that any target linking this also includes the header files
target_include_directories(libserialport  
  INTERFACE
  ${LIBSP_INCLUDE_DIRS}
)

# Build the main executable
add_executable(zmq_example main.c)

# Link against zmq and libserialport (prefer private over public linking)
target_link_libraries(zmq_example
  PRIVATE
  libserialport
  libzmq 
)
target_include_directories(zmq_example
  PRIVATE
  $<BUILD_INTERFACE:${libzmq_SOURCE_DIR}/include>
)
